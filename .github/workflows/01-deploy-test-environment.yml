name: Deploy Test Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - dev

env:
  AWS_REGION: eu-west-2

jobs:
  deploy-onprem:
    name: Deploy Simulated On-Prem
    runs-on: ubuntu-latest
    outputs:
      vpc_id: ${{ steps.outputs.outputs.vpc_id }}
      agent_ip: ${{ steps.outputs.outputs.agent_ip }}
      windows_ip: ${{ steps.outputs.outputs.windows_ip }}
      windows_password_command: ${{ steps.outputs.outputs.windows_password_command }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Deploy On-Prem Infrastructure
        working-directory: ./on-premises
        run: |
          terraform init
          terraform apply -auto-approve -var="ssh_public_key="
      
      - name: Save Generated SSH Key
        if: always()
        working-directory: ./on-premises
        run: |
          PRIVATE_KEY=$(terraform output -raw private_key_pem 2>/dev/null || echo "")
          if [ ! -z "$PRIVATE_KEY" ]; then
            echo "$PRIVATE_KEY" > dsl-test-key.pem
            chmod 600 dsl-test-key.pem
            echo "SSH key saved to dsl-test-key.pem"
          fi
      
      - name: Get Outputs
        id: outputs
        working-directory: ./on-premises
        run: |
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "agent_ip=$(terraform output -raw datasync_agent_private_ip)" >> $GITHUB_OUTPUT
          echo "windows_ip=$(terraform output -raw windows_server_ip)" >> $GITHUB_OUTPUT
          
          INSTANCE_ID=$(terraform state show aws_instance.windows_server | grep -E '^\s*id\s*=' | cut -d'"' -f2)
          echo "windows_password_command=aws ec2 get-password-data --instance-id $INSTANCE_ID --priv-launch-key dsl-test-key.pem" >> $GITHUB_OUTPUT
      
      - name: Upload SSH Key as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: on-premises/dsl-test-key.pem
          retention-days: 1
      
      - name: Wait for Windows Initialization
        run: |
          echo "Waiting for Windows servers to initialize..."
          echo "This takes about 5-10 minutes for Windows to be ready..."
          sleep 300
          
  deploy-aws-infrastructure:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    outputs:
      vpc_id: ${{ steps.outputs.outputs.vpc_id }}
      general_bucket: ${{ steps.outputs.outputs.general_bucket }}
      certs_bucket: ${{ steps.outputs.outputs.certs_bucket }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Deploy AWS Infrastructure
        working-directory: ./aws-infrastructure
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="environment=${{ github.event.inputs.environment }}"
      
      - name: Get Outputs
        id: outputs
        working-directory: ./aws-infrastructure
        run: |
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "general_bucket=$(terraform output -raw general_bucket_name)" >> $GITHUB_OUTPUT
          echo "certs_bucket=$(terraform output -raw certificates_bucket_name)" >> $GITHUB_OUTPUT

  connect-networks:
    name: Connect Networks
    needs: [deploy-onprem, deploy-aws-infrastructure]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Connect VPCs
        working-directory: ./connectivity
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="onprem_vpc_id=${{ needs.deploy-onprem.outputs.vpc_id }}" \
            -var="aws_vpc_id=${{ needs.deploy-aws-infrastructure.outputs.vpc_id }}"
      
      - name: Verify Connectivity
        run: |
          echo "Networks connected successfully"
          echo "VPC Peering established between:"
          echo "  On-Prem VPC: ${{ needs.deploy-onprem.outputs.vpc_id }}"
          echo "  AWS VPC: ${{ needs.deploy-aws-infrastructure.outputs.vpc_id }}"

  activate-datasync-agent:
    name: Activate DataSync Agent
    needs: [deploy-onprem, connect-networks]
    runs-on: ubuntu-latest
    
    steps:
      - name: Display Agent Activation Info
        run: |
          echo "::notice title=Manual Action Required::Please activate the DataSync agent"
          echo "Agent IP: ${{ needs.deploy-onprem.outputs.agent_ip }}"
          echo "Activation URL: http://${{ needs.deploy-onprem.outputs.agent_ip }}"
          echo ""
          echo "1. Access the agent URL above"
          echo "2. Get activation key from AWS Console"
          echo "3. Complete activation"
          echo "4. This job will wait for 5 minutes"
          
      - name: Wait for Manual Activation
        run: sleep 300

  configure-datasync:
    name: Configure DataSync
    needs: [activate-datasync-agent, deploy-onprem, deploy-aws-infrastructure]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Configure DataSync Tasks
        working-directory: ./datasync-configuration
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="agent_ip=${{ needs.deploy-onprem.outputs.agent_ip }}" \
            -var="windows_ip=${{ needs.deploy-onprem.outputs.windows_ip }}" \
            -var="general_bucket=${{ needs.deploy-aws-infrastructure.outputs.general_bucket }}" \
            -var="certs_bucket=${{ needs.deploy-aws-infrastructure.outputs.certs_bucket }}"
      
      - name: Summary
        run: |
          echo "## Deployment Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources Created:" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Server: ${{ needs.deploy-onprem.outputs.windows_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- DataSync Agent: ${{ needs.deploy-onprem.outputs.agent_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- General Bucket: ${{ needs.deploy-aws-infrastructure.outputs.general_bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "- Certificates Bucket: ${{ needs.deploy-aws-infrastructure.outputs.certs_bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run the 'Test DataSync Transfer' workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor transfer in AWS Console" >> $GITHUB_STEP_SUMMARY