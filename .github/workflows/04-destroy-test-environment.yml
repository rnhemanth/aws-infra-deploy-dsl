name: Destroy Test Environment

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type DESTROY to confirm'
        required: true
      destroy_aws:
        description: 'Destroy AWS infrastructure'
        type: boolean
        default: true
      destroy_onprem:
        description: 'Destroy on-prem simulation'
        type: boolean
        default: true

jobs:
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'DESTROY'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Destroy DataSync Configuration
        working-directory: ./datasync-configuration
        run: |
          terraform init || echo "Init failed, continuing..."
          if [ -f terraform.tfstate ] && [ -s terraform.tfstate ]; then
            terraform destroy -auto-approve \
              -var="agent_ip=dummy" \
              -var="windows_ip=dummy" \
              -var="general_bucket=dummy" \
              -var="certs_bucket=dummy" || echo "DataSync destroy failed, continuing..."
          else
            echo "No DataSync state found, skipping..."
          fi
      
      - name: Destroy Connectivity
        working-directory: ./connectivity
        run: |
          terraform init || echo "Init failed, continuing..."
          if [ -f terraform.tfstate ] && [ -s terraform.tfstate ]; then
            terraform destroy -auto-approve \
              -var="onprem_vpc_id=dummy" \
              -var="aws_vpc_id=dummy" || echo "Connectivity destroy failed, continuing..."
          else
            echo "No connectivity state found, skipping..."
          fi
      
      - name: Force Terminate EC2 Instances
        run: |
          echo "=== Terminating EC2 Instances ==="
          # Get all test instances
          INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          
          if [ ! -z "$INSTANCES" ]; then
            echo "Terminating instances: $INSTANCES"
            aws ec2 terminate-instances --instance-ids $INSTANCES
            echo "Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $INSTANCES || echo "Wait timeout, continuing..."
          else
            echo "No instances found with Purpose=DSL-Migration-Testing"
          fi
          
          # Also check for instances with test names
          TEST_INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=test-*" "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          
          if [ ! -z "$TEST_INSTANCES" ]; then
            echo "Terminating test instances: $TEST_INSTANCES"
            aws ec2 terminate-instances --instance-ids $TEST_INSTANCES
            aws ec2 wait instance-terminated --instance-ids $TEST_INSTANCES || echo "Wait timeout, continuing..."
          fi
      
      - name: Delete Network Interfaces
        run: |
          echo "=== Deleting Network Interfaces ==="
          # Find and delete unattached network interfaces in test VPCs
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Checking VPC: $vpc_id"
            ENI_IDS=$(aws ec2 describe-network-interfaces \
              --filters "Name=vpc-id,Values=$vpc_id" "Name=status,Values=available" \
              --query 'NetworkInterfaces[].NetworkInterfaceId' \
              --output text)
            
            for eni_id in $ENI_IDS; do
              echo "Deleting ENI: $eni_id"
              aws ec2 delete-network-interface --network-interface-id $eni_id || echo "Failed to delete $eni_id"
            done
          done
      
      - name: Delete VPC Endpoints
        run: |
          echo "=== Deleting VPC Endpoints ==="
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Deleting VPC endpoints in VPC: $vpc_id"
            ENDPOINT_IDS=$(aws ec2 describe-vpc-endpoints \
              --filters "Name=vpc-id,Values=$vpc_id" \
              --query 'VpcEndpoints[].VpcEndpointId' \
              --output text)
            
            for endpoint_id in $ENDPOINT_IDS; do
              echo "Deleting VPC endpoint: $endpoint_id"
              aws ec2 delete-vpc-endpoint --vpc-endpoint-id $endpoint_id || echo "Failed to delete $endpoint_id"
            done
          done
      
      - name: Delete NAT Gateways
        run: |
          echo "=== Deleting NAT Gateways ==="
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Checking VPC: $vpc_id"
            NAT_GW_IDS=$(aws ec2 describe-nat-gateways \
              --filter "Name=vpc-id,Values=$vpc_id" "Name=state,Values=available" \
              --query 'NatGateways[].NatGatewayId' \
              --output text)
            
            for nat_id in $NAT_GW_IDS; do
              echo "Deleting NAT Gateway: $nat_id"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat_id
            done
          done
      
      - name: Delete VPC Peering Connections
        run: |
          echo "=== Deleting VPC Peering Connections ==="
          PEERING_IDS=$(aws ec2 describe-vpc-peering-connections \
            --filters "Name=status-code,Values=active,pending-acceptance" \
            --query 'VpcPeeringConnections[?Tags[?Key==`Name` && Value==`simulates-directconnect-tgw`]].VpcPeeringConnectionId' \
            --output text)
          
          for peering_id in $PEERING_IDS; do
            echo "Deleting VPC peering: $peering_id"
            aws ec2 delete-vpc-peering-connection --vpc-peering-connection-id $peering_id
          done
      
      - name: Destroy AWS Infrastructure
        if: github.event.inputs.destroy_aws == 'true'
        working-directory: ./aws-infrastructure
        run: |
          terraform init || echo "Init failed, continuing..."
          if [ -f terraform.tfstate ] && [ -s terraform.tfstate ]; then
            terraform destroy -auto-approve \
              -var="environment=test" || echo "AWS infrastructure destroy failed, continuing..."
          else
            echo "No AWS state found, skipping..."
          fi
      
      - name: Force Delete S3 Buckets
        run: |
          echo "=== Deleting S3 Buckets ==="
          aws s3 ls | grep -E '(dsl|test)' | awk '{print $3}' | while read bucket; do
            if [ ! -z "$bucket" ]; then
              echo "Deleting bucket: $bucket"
              # Delete all objects and versions first
              aws s3api delete-objects --bucket $bucket \
                --delete "$(aws s3api list-object-versions --bucket $bucket --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" 2>/dev/null || true
              # Delete delete markers
              aws s3api delete-objects --bucket $bucket \
                --delete "$(aws s3api list-object-versions --bucket $bucket --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" 2>/dev/null || true
              # Delete bucket
              aws s3 rb s3://$bucket --force || echo "Failed to delete $bucket"
            fi
          done
      
      - name: Delete Security Groups
        run: |
          echo "=== Deleting Security Groups ==="
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Deleting security groups in VPC: $vpc_id"
            SG_IDS=$(aws ec2 describe-security-groups \
              --filters "Name=vpc-id,Values=$vpc_id" \
              --query 'SecurityGroups[?GroupName!=`default`].GroupId' \
              --output text)
            
            for sg_id in $SG_IDS; do
              echo "Deleting security group: $sg_id"
              aws ec2 delete-security-group --group-id $sg_id || echo "Failed to delete $sg_id"
            done
          done
      
      - name: Delete Subnets
        run: |
          echo "=== Deleting Subnets ==="
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Deleting subnets in VPC: $vpc_id"
            SUBNET_IDS=$(aws ec2 describe-subnets \
              --filters "Name=vpc-id,Values=$vpc_id" \
              --query 'Subnets[].SubnetId' \
              --output text)
            
            for subnet_id in $SUBNET_IDS; do
              echo "Deleting subnet: $subnet_id"
              aws ec2 delete-subnet --subnet-id $subnet_id || echo "Failed to delete $subnet_id"
            done
          done
      
      - name: Delete Route Tables
        run: |
          echo "=== Deleting Route Tables ==="
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Deleting route tables in VPC: $vpc_id"
            RT_IDS=$(aws ec2 describe-route-tables \
              --filters "Name=vpc-id,Values=$vpc_id" \
              --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' \
              --output text)
            
            for rt_id in $RT_IDS; do
              echo "Deleting route table: $rt_id"
              aws ec2 delete-route-table --route-table-id $rt_id || echo "Failed to delete $rt_id"
            done
          done
      
      - name: Delete Internet Gateways
        run: |
          echo "=== Deleting Internet Gateways ==="
          for vpc_id in $(aws ec2 describe-vpcs --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" --query 'Vpcs[].VpcId' --output text); do
            echo "Deleting IGWs in VPC: $vpc_id"
            IGW_IDS=$(aws ec2 describe-internet-gateways \
              --filters "Name=attachment.vpc-id,Values=$vpc_id" \
              --query 'InternetGateways[].InternetGatewayId' \
              --output text)
            
            for igw_id in $IGW_IDS; do
              echo "Detaching and deleting IGW: $igw_id"
              aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id || echo "Failed to detach $igw_id"
              aws ec2 delete-internet-gateway --internet-gateway-id $igw_id || echo "Failed to delete $igw_id"
            done
          done
      
      - name: Delete VPCs
        run: |
          echo "=== Deleting VPCs ==="
          VPC_IDS=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" \
            --query 'Vpcs[].VpcId' \
            --output text)
          
          for vpc_id in $VPC_IDS; do
            echo "Deleting VPC: $vpc_id"
            aws ec2 delete-vpc --vpc-id $vpc_id || echo "Failed to delete $vpc_id"
          done
      
      - name: Destroy On-Prem Simulation
        if: github.event.inputs.destroy_onprem == 'true'
        working-directory: ./on-premises
        run: |
          terraform init || echo "Init failed, continuing..."
          if [ -f terraform.tfstate ] && [ -s terraform.tfstate ]; then
            terraform destroy -auto-approve || echo "On-prem destroy failed, continuing..."
          else
            echo "No on-prem state found, skipping..."
          fi
      
      - name: Delete IAM Roles and Policies
        run: |
          echo "=== Deleting IAM Resources ==="
          # Delete test IAM roles
          ROLES=$(aws iam list-roles --query 'Roles[?contains(RoleName, `test-`) || contains(RoleName, `datasync`)].RoleName' --output text)
          for role in $ROLES; do
            echo "Deleting role: $role"
            # Detach managed policies
            aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[].PolicyArn' --output text | xargs -r -I {} aws iam detach-role-policy --role-name $role --policy-arn {}
            # Delete inline policies
            aws iam list-role-policies --role-name $role --query 'PolicyNames[]' --output text | xargs -r -I {} aws iam delete-role-policy --role-name $role --policy-name {}
            # Delete role
            aws iam delete-role --role-name $role || echo "Failed to delete role $role"
          done
      
      - name: Delete KMS Keys
        run: |
          echo "=== Scheduling KMS Key Deletion ==="
          # Find KMS keys with test aliases
          aws kms list-aliases --query 'Aliases[?contains(AliasName, `test-`) || contains(AliasName, `dsl`)].TargetKeyId' --output text | while read key_id; do
            if [ ! -z "$key_id" ]; then
              echo "Scheduling deletion of KMS key: $key_id"
              aws kms schedule-key-deletion --key-id $key_id --pending-window-in-days 7 || echo "Failed to schedule deletion of $key_id"
            fi
          done
      
      - name: Final Cleanup Summary
        run: |
          echo "=== Final Cleanup Summary ==="
          echo "Checking for any remaining resources..."
          
          echo "=== Remaining EC2 Instances ==="
          aws ec2 describe-instances \
            --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query 'Reservations[].Instances[].[InstanceId,State.Name,Tags[?Key==`Name`].Value|[0]]' \
            --output table || echo "No instances found"
          
          echo "=== Remaining S3 Buckets ==="
          aws s3 ls | grep -E '(dsl|test)' || echo "No test buckets found"
          
          echo "=== Remaining VPCs ==="
          aws ec2 describe-vpcs \
            --filters "Name=tag:Purpose,Values=DSL-Migration-Testing" \
            --query 'Vpcs[].[VpcId,CidrBlock,Tags[?Key==`Name`].Value|[0]]' \
            --output table || echo "No test VPCs found"
          
          echo "=== Cleanup Complete ==="